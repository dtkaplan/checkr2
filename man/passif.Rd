% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/outcomes.R
\name{generic_test}
\alias{generic_test}
\alias{req}
\alias{passif}
\alias{failif}
\alias{noteif}
\title{Collate a test expression with a message and a action.}
\usage{
passif(test, message)
}
\arguments{
\item{test}{an expression written in terms of values found
in the pattern-matching bindings}

\item{message}{a character string containing the message to return.}

\item{test}{an expression returning a logical. Can use the bindings
defined in the context in the expression.}

\item{message}{a text string to display if test fails}
}
\description{
These functions are simply a way to associate a message with a test.
The test itself will be evaluated in \code{run_tests()}, not in these functions.
}
\details{
The \code{message} can include components calculated from the bindings.
Enclose these in moustaches, e.g. "The \code{{{fn}}} function is not appropriate for adding."
Within a test, the operators \code{==} and \code{!=} in a test have been augmented to deal
with language objects such as names. They are translated to be equivalent to "\%same_as\%".
}
\examples{
code <- for_checkr(quote({x <- 2; y <- x^2; z <- x + y}))
my_line <- line_where(code, F == `+`)
if_matches(my_line, `+`(..(x), ..(y)), must(y == 4, "use 5 for the second argument to +"))
#' @export
must <- function(test, message = paste("{{test_string}} failed.")) {
  test <- rlang::enquo(test)
  function(task, res) {
    if (task == "test") test
    else if (task == "message") ifelse(res, "", message)
    else if (task == "action") ifelse(res, "ok", "fail")
  }
}
}
